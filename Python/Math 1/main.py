def linear_interpolation(vector, n=1):
    """
    1D linear interpolation
    :param vector: list of values
    :param n: number of values to generate in between each pair of values
    :return: list of values with the additional values generated by linear interpolation
    """
    new_values = []
    for i in range(len(vector) - 1):
        x1, x2 = vector[i], vector[i + 1]
        new_values.append(x1)
        for j in range(1, n + 1):
            new_values.append(x1 + (x2 - x1) * j / (n + 1))
    new_values.append(vector[-1])
    return new_values


def linear_interpolation_2d(matrix, n=1):
    """
    2D linear interpolation
    :param matrix: list of lists of values
    :param n: number of values to generate in between each pair of values
    :return: list of lists of values with the additional values generated by linear interpolation
    """
    new_matrix = []
    for row in matrix:
        new_matrix.append(linear_interpolation(row, n))
    new_matrix = [list(row) for row in zip(*new_matrix)]
    new_matrix = [linear_interpolation(row, n) for row in new_matrix]
    new_matrix = [list(row) for row in zip(*new_matrix)]
    return new_matrix


def main():
    vector = [100, 150, 90, 28]
    print("Original vector:")
    print([int(x) if x == int(x) else round(x, 2) for x in vector])
    vector = linear_interpolation(vector, 2)
    print("Interpolated vector:")
    print([int(x) if x == int(x) else round(x, 2) for x in vector])

    matrix = [[1, 3, 5], [3, 5, 7], [5, 7, 9]]
    print("Original matrix:")
    for row in matrix:
        print([int(x) if x == int(x) else round(x, 2) for x in row])
    matrix = linear_interpolation_2d(matrix)
    print("Interpolated matrix:")
    for row in matrix:
        print([int(x) if x == int(x) else round(x, 2) for x in row])


if __name__ == "__main__":
    main()
